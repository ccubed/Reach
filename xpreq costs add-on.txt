THIS FIRST SECTION can be considered a test of concept. Most of the code comes from the +xpreq system.

Willpower remains a sticking point: Sacrificed is set as a negative in the &_willmod attribute, so spending xp on willpower should be, e.g., -1 -> 0, or 8xp.

Whether or not this can be attained easily remains to be seen.

-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-


&C.XP-COST.GUESS #14370=$+xpcost *:
	think 
		matching: [regmatchi(%0, v( d.regmatch.xpreq ), 0 1 2 3 4 )]%r
		category: [setr( c, trim( first( %q1, / )))] %r
		stat: [setr( s, trim( before( rest( %q1, / ), : )))] %r
		type: [setr( t, titlestr( trim( rest( %q1, : ))))] %r
		to value: %q3 %r
		cost: [setr( x, 
			trim( before( before( %q4, = ), xp ))
		)]%r
		notes: [setr( n, trim( after( %0, = )))]%r
		in chargen?: [setr( a, isapproved( %#, unapproved ))];

	@assert cor( isapproved( %# ), %qa )={ 
		@pemit %#=Approved or unapproved players only. 
	}; 

	@assert t( statnum( sheetset, %qc ))={ 
		@pemit %#=I can't find sheet category '%qc'. 
	}; 

	@assert eq( words( rest( setr( i, mall( sheetset, %qc )) , : )), 1 )={ 
		@pemit %#=Category: %qi 
	}; 

	think 
		check & fix category: 
			[setr( c, 
				case( 
					setr( c, trim( rest( %qi, : ))), 
					respect, renown, 
					contracts, contract, 
					ceremonies, ceremonies, 
					%qc 
				)
			)] %r
		stat_with_underscores: [setr( e, edit( %qs, %b, _ ))]; 

	@trigger %!/trig.xp-cost.
		[if( strmatch( %qc, specialty ), specialty, normal )]=
		%#, 
		%q3, 
		%qn, 
		%qc, 
		%qe, 
		%qt, 
		%qx, 
		@@(no longer used), 
		%qa;


-=-=-=-=-=-=-=-=-=-=-=-=-=-=





--


0: enactor (%#)
1: to-value
2: notes <-- Ignored for testing 
3: trait category
4: stat/trait with underscores
5: type (instance)
6: unadjusted cost
7: adjusted cost <-- NO LONGER USED 
8: 1 if unapproved

f: full stat name (for partial-name matching)
u: templates that are allowed access
i: temp register, via u( f.statget )
t: type / instance (%5), or replaced via u( f.statget )
z: player's current value for trait, via u( f.statget )
v: costs allowed for this trait (not xp costs, but valid levels)

x: estimated xp cost

Currently works only with 'normal' traits, not global nor specialties. 

--

&trig.xp-cost.normal #14370=
	think 
		full stat: [setr( f, statfull( %3, %4 ))]; 

@@ .. validate trait category and trait 

	@assert t( statnum( %3, %4 ))={ 
		@pemit %0=I can't find the [lcstr( %3 )] '[edit( %4, _, %b )]'. 
	}; 

	@assert isrepeat( %3, %4 )={ 
		@pemit %0=[titlestr( %3 )]: [mall( %3, %4 )] 
	}; 

	@assert 
		cor( 
			match( setr( u, default( #2681/access-%4, all )), all ), 
			strmatch( template( %0 ), %qu )
		)={ 
			@pemit %0=The trait '%qf' is only for the template(s) 
			[itemize( %qu )]. 
	}; 

@@ .. get stat's current value

	think 
		u( f.statget, 
			if( not( %qf ), global, normal), 
			%0, %3, setr( t, %5 ), %qf 
		); 
	
	@assert 
		if( 
			t( match( v( d.no-value.classes ), %3 )), 
			1, 
			or( 
				t( match( cat( setr( v, u( f.list.costs, %qf )), 0 ), %1 )), 
				cand( strmatch( %qv, ), isint( %1 ), gte( %1, 0 ))
			)
		)={ 
			@pemit %0=
				if( strmatch( %qv, ), 
					I was expecting the new value to be a positive integer., 
					I was expecting a new value of: [itemize( %qv, , or )] 
				) 
		}; 

	@assert 
		if( 
			t( match( v( d.no-value.classes ), %3 )), 
			strmatch( %1, ), 
			1 
		)={ 
			@pemit %0=[capstr( %3 )]s cannot be set to a value. 
		}; 

	@assert 
		cor( gt( %1, %qz ), strmatch( %1, ))={ 
			@pemit %0=The trait's new value of '%1' must be higher than its 
			current value of '%qz'. 
	}; 

@@ .. estimate xp value
@@ .. (AIGH WILLPOWER! Make this work!)
	think 
	cost: [setr( x, 
			udefault( xp.[edit( %3, %b, _ )].%4, 
				u( xp.[edit( %3, %b, _ )], %0, %qz, %1 ), 
				%0, 
				%qz, 
				%1 
			)
		)]%r
	[footer()]; 

	@pemit %0=Cost: I think getting '[if( t( %qf ), %qf, first( %qi, : ))][if( t( %5 ), %b%(%5%))]' to %1 costs %qx xp.

-=--=-=-=-=-=-=-=-=-=-=

&TRIG.XP-COST.SPECIALTY #14370=
	think 
		full stat: [setr( f, statfull( skill, %4 ))] %r
		specialty: [setr( t, iter( %5, titlestr( %i0 ), _, _))] %r
		[if( 
			cand( not( %qf ), not( %5 )), 
			full stat try 2: [setr( f, statfull( skill, first( %4, . )))] %r
			specialty try 2: 
				[setr( t, iter( rest( %4, . ), titlestr( %i0 ), _, _))] %r
		)]
		matching specialties: 
			[setr( z, 
				grab( 
					get( %0/_specialties ), 
					[statnum( skill, %qf )]:%qt 
				)
			)] %r
		specialty cost: [setr( x, u( xp.skill.specialty, %0, 0, 1 ))]; 

	@assert cand( t( %4 )), t( %5 ))={ 
		@pemit %0=You must give me both a skill and a specialty. 
	}; 

	@assert t( %qf )={ 
		@pemit %0=Specialties can only be added to skills. 
	}; 

	@assert not( %1 )={ 
		@pemit %0=Specialties cannot be set to a value. 
	}; 

	@break t( %qz )={ 
		@pemit %0=You already have the %qf specialty '[edit( %qt, _, %b )]'. 
	}; 

	@@ <<<--- Also in trig.process.normal --->>>; 

	@assert cand( isint( %6 ), gt( %6, 0 ))={ 
		@pemit %0=Unadjusted costs must be set to a positive integer value. 
	}; 

	@pemit %0=Cost: I think getting '%qf.%qt' costs %qx xp.




================================================================================
== DATA ========================================================================

@@ 0: dbref of target
@@ 1: from
@@ 2: to

@@ -- standard
&xp.attribute #14370=u( f.cost.standard, 5, %1, %2 )
&xp.skill #14370=u( f.cost.standard, 3, %1, %2 )
&xp.skill.specialty #14370=3
&xp.merit #14370=u( f.cost.standard, 2, %1, %2 )
&xp.morality #14370=u( f.cost.standard, 3, %1, %2 )
&xp.willpower #14370=u( f.cost.single, 8, %1, %2 )
&xp.power_trait #14370=u( f.cost.standard, 8, %1, %2 )

@@ -- changeling
&xp.wyrd #14370=u( f.cost.standard, 8, %1, %2 )
&xp.contract #14370=u( f.cost.standard, 6, %1, %2 )
&xp.goblin #14370=u( f.cost.direct, 3, %1, %2 )
&xp.merit.token_limb #14370=u( f.cost.standard, 3, %1, %2 )

@@ -- changing breeds
&xp.aspect #14370=u( f.cost.standard, 5, %1, %2 )
&xp.favor #14370=u( f.cost.standard, 7, %1, %2 )
&xp.renown #14370=u( f.cost.standard, case( template( %0 ), Shifter, 6, Werewolf, 8, 0 ), %1, %2 )

@@ -- cultist
&xp.cult-rite #14370=u( f.cost.standard, 2, %1, %2 )

@@ -- hunter
&xp.benediction #14370=5
&xp.elixir #14370=u( f.cost.single, 1, %1, %2 )
&xp.thaumatechnology #14370=u( f.cost.standard, 2, %1, %2 )
&xp.ducheval #14370=2
&xp.armory #14370=u( f.cost.standard, 2, %1, %2 )
&xp.tactic.whichever #14370=u( f.cost.standard, <cost>, %1, %2 )

@@ -- geist
&xp.psyche #14370=u( f.cost.standard, 8, %1, %2 )
&xp.manifestation #14370=u( f.cost.standard, 6, %1, %2 )
&xp.key #14370=10
&xp.ceremony #14370=u( f.cost.standard, 8, %1, %2 )

@@ -- mage
&xp.gnosis #14370=u( f.cost.standard, 8, %1, %2 )
&xp.arcanum #14370=u( f.cost.standard, 8, %1, %2 )
&xp.rote #14370=u( f.cost.standard, 2, %1, %2 )

@@ -- possessed
&xp.vice-power #14370=u( f.cost.standard, 10, %1, %2 )
&xp.vestment #14370=10

@@ -- purified (immortal)
&xp.chi #14370=u( f.cost.standard, 8, %1, %2 )
&xp.siddhi #14370=u( f.cost.standard, 7, %1, %2 )
&xp.numen #14370=10

@@ -- vampire
&xp.blood-potency #14370=u( f.cost.standard, 8, %1, %2 )
&xp.discipline #14370=u( f.cost.standard, case( template( %0 ), Vampire, 7, Ghoul, 14, 0 ), %1, %2 )
&xp.discipline.cruac #14370=u( f.cost.standard, 7, %1, %2 )
&xp.discipline.coil_of_banes #14370=u( f.cost.standard, 8, %1, %2 )
&xp.discipline.coil_of_blood #14370=u( f.cost.standard, 8, %1, %2 )
&xp.discipline.coil_of_flesh #14370=u( f.cost.standard, 8, %1, %2 )
&xp.discipline.coil_of_the_beast #14370=u( f.cost.standard, 8, %1, %2 )
&xp.discipline.coil_of_the_soul #14370=u( f.cost.standard, 8, %1, %2 )

&xp.theban #14370=u( f.cost.single, 2, %1, %2 )
&xp.ritual #14370=u( f.cost.single, 2, %1, %2 )


@@ -- werewolf
&xp.primal-urge #14370=u( f.cost.standard, 8, %1, %2 )
&xp.gift #14370=case( template( %0 ), Werewolf, u( f.cost.standard, 7, %1, %2 ), Shifter, u( f.cost.direct, 5, %1, add( %2, max( 0, sub( %2, 3 )))), 0 )

&xp.gift.rituals_1 #14370=5
&xp.gift.rituals_2 #14370=10
&xp.gift.rituals_3 #14370=15
&xp.gift.rituals_4 #14370=20
&xp.gift.rituals_5 #14370=25

&xp.rite #14370=u( f.cost.direct, 2, %1, %2 )
&xp.merit.totem #14370=u( f.cost.single, 3, %1, %2 )


================================================================================
== COST CALCULATIONS ===========================================================

@@ 0: value
@@ 1: from (first)
@@ 2: to (last)
@@ Numbers from 'first' to 'last' is: ( L² - F² + F + L ) / 2 
@@ We '++from' because we want all the numbers it's raised /past/ 'from'.
@@ So: (( L² - ++F² + ++F + L ) / 2 ) * cost
@@ We '* cost * .5' to make sure it's still integer before it's floating.

&f.cost.standard #14370=mul( add( power( %2, 2 ), -[power( inc( %1 ), 2 )], inc( %1 ), %2 ), %0, .5 )

@@ Do not pass Go
&f.cost.direct #14370=mul( %0, %2 )

@@ cost * levels bought
&f.cost.single #14370=mul( %0, sub( %2, %1 ))


================================================================================
== NOTES =======================================================================

Other notes, to be dwelled upon.

** Changeling
Affinity Contract	 New Dots x 4
Non-Affinity Contract	 New Dots x 6

** Changing Breeds

Breed Favor	 New Dots x 5
Non-Breed Favor	 New Dots x 7

** The Cult of Things that Must Not Be

Power [2]	 10 <-- Not in the system; +noted only

** Hunter
Elixir	 Dots <-- what?
Rite of Denial	 5 <-- ???
Gutter Magic Mystery	8
Gutter Magic Spell	New Dots x 3

** Geist
Ceremony (Mentored) [3]	 Dots x 2
Ceremony (Self-Taught) [3]	 Dots x 3

** Mage
Ruling Arcanum	 New Dots x 6
Common Arcanum	 New Dots x 7
Inferior Arcanum	 New Dots x 8

** Possessed
Vestment	 10 <-- Flat? Yes: rating is minimum 'vice' required

** Purified
Chi	 New Dots x 8

** Siten Uzu <-- Skinchangers, fox spirits co-habitating bodies
Siten Uzu Attribute	New Dots x 3
Aspect	Dots x 6

** Skinthieves
Aspect	 New Dots x 5

** Vampire
Coils, Cruac, Theban [5]	 New Total Dots x 7
Blood Sorcery Ritual	 Dots x 2 <-- where is this?
Devotion	 Refer to Devotion <-- this doesn't help!
Fontal Ritual	 5 <-- where is this?
Protean 2 & 4 / Web Variant	 3 <-- ?!?!?!?!

** Ghouls
In-Clan Discipline	 New Dots x 10
Out-of-Clan Discipline	 New Dots x 14

** Werewolf
Affinity Gift[6] / Rituals	 New Dots x 5
Non-Affinity Gift[6]	 New Dots x 7
Primary Renown	 New Dots x 6
Other Renown	 New Dots x 8
